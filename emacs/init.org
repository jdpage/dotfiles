#+TITLE: Emacs configuration file
#+AUTHOR: Jonathan David Page
#+PROPERTY: header-args:emacs-lisp :tangle yes :noweb tangle

* Init machinery
** Auto-tangle

All changes should be done in =init.org=, *not* in =init.el=. Changes to
=init.el= will be overwritten.

We're using lexical binding for the init file, which is specified in a header.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
;;; THIS IS A GENERATED FILE; see init.org
#+END_SRC

After first run, =init.el= should mirror the source blocks in =init.org=. To
regenerate =init.el=, run =org-babel-tangle= (=C-c C-v t=); for convenience,
this is done automatically on saving the buffer.

I originally had this byte-compile the file as well, which turned out to be a
huge pain when the file was valid, but wouldn't byte-compile because it referred
to something from a package that hadn't been loaded/installed yet. This resulted
in Emacs getting stuck on the byte-compiled version.

#+BEGIN_SRC emacs-lisp
  (defun my/tangle-init ()
    "If the current buffer is 'init.org' the code blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling
      (let ((prog-mode-hook nil)
            (org-confirm-babel-evaluate nil))
        (org-babel-tangle)
        (org-html-export-to-html))))

  (add-hook 'after-save-hook 'my/tangle-init)
#+END_SRC

Since =init.el= gets overwritten constantly, Emacs adding customizations to it
is a bit futile. These are punted off into another file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file t)
#+END_SRC

** Machine-local settings support

Machine-local settings live in a separate file. Load =local.el= if it exists,
after the init file is complete.

#+BEGIN_SRC emacs-lisp
  (defun my/load-local-init ()
    (let ((local-file (concat user-emacs-directory "local.el")))
      (when (file-exists-p local-file)
	(load-file local-file))))

  (add-hook 'after-init-hook 'my/load-local-init)
#+END_SRC

Additionally, some behavior is macOS-only, so define a convenient constant to
test against.

#+BEGIN_SRC emacs-lisp
  (defconst *my/is-macos*
    (memq window-system '(mac ns))
    "True if Emacs is running under macOS")
#+END_SRC

The GNU versions of some command-line tools support extra options. We use the
GNU versions on Linux and Windows, but not macOS.

#+BEGIN_SRC emacs-lisp
  (defconst *my/is-gnu-like*
    (or (string= "cygwin" system-type)
	(string= "windows-nt" system-type)
	(string-prefix-p "gnu" (symbol-name system-type)))
    "True if we expect GNU-like coreutils")
#+END_SRC

* Package Management

Use the built-in package manager.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Packages are fetched from MELPA, MELPA-Stable, or Org.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

Main package management is through =use-package=, but that has to be installed
first.

#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* Configuration
** Libraries

#+BEGIN_SRC emacs-lisp
  (use-package dash :config (dash-enable-font-lock))
  (use-package delight)
#+END_SRC

** Platform Fixes

On macOS, GUI applications tend to miss out on environment variables. We can
pull these from the shell instead.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if *my/is-macos*
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

We only expect GNU coreutils on some systems. Tell Emacs about systems where we
don't think we'll have them.

#+BEGIN_SRC emacs-lisp
  (when (not *my/is-gnu-like*)
    (setq dired-use-ls-dired nil))
#+END_SRC

** Safety & Backups

By default Emacs scatters backup files all over the shop. Instead, we'd prefer
for them to all be in one directory.

#+BEGIN_SRC emacs-lisp
  (setq my-backup-directory (concat user-emacs-directory "backups"))
  (when (not (file-exists-p my-backup-directory))
    (make-directory my-backup-directory))
  (setq backup-directory-alist `(("." . ,my-backup-directory)))
#+END_SRC

Keep multiple versions of backup files. We can always delete them later if they
prove to be a pain.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)    ; this is a bit safer
  (setq version-control t)      ; numbered backups
  (setq delete-old-versions t)  ; manage excess backups
  (setq kept-old-versions 6)
  (setq kept-new-versions 9)
#+END_SRC

Instead of instantly consigning files to oblivion, move them to the trash.

#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC

** History

#+BEGIN_SRC emacs-lisp
  (setq savehist-file (concat user-emacs-directory "savehist"))
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
  (setq recentf-max-saved-items 100)
  (recentf-mode 1)
#+END_SRC

** Visual Experience

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
  (setq inhibit-startup-message t)
  (setq global-linum-mode nil)  ; maybe?
#+END_SRC

Font face and size. Let me tell you how much I love this font.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Fantasque Sans Mono-10"))
#+END_SRC

Display emojis! These are crucial.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq emojify-emoji-styles 'unicode)
  (setq emojify-display-style 'image)
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+END_SRC

Modes that need to be enabled/disabled:

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)      ; no toolbars
  (scroll-bar-mode 0)    ; no scrollbars
  (blink-cursor-mode 0)  ; no blinking cursor
  (show-paren-mode 1)
  (global-prettify-symbols-mode 1)
#+END_SRC

** Better Defaults

They're better.

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults)
#+END_SRC

** Input

#+BEGIN_SRC emacs-lisp
  (setq default-input-method "TeX")
  (setq initial-scratch-message nil)
  (setq sentence-end-double-space nil)
  (setq-default fill-column 80)
  (setq-default truncate-lines nil)  ; visual wrap
  (setq-default auto-fill-function 'do-auto-fill)
  (fset 'yes-or-no-p 'y-or-n-p)  ; laziness enhancer

  (use-package emacs
    :delight
    (auto-fill-function " ⭤"))

  (delete-selection-mode 1)
  (global-auto-revert-mode 1)
#+END_SRC

Use =utf-8= by default, because it's the 21st century and all.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

** TODO Smartparens
   This wants to be global?

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config))
#+END_SRC

** Autocomplete
   
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+END_SRC

** Syntax Checking

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :delight (flycheck-mode " 👁")
    :commands flycheck-mode)
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :delight which-key-mode
    :config (which-key-mode 1))
#+END_SRC

** Powerline

Powerline, for fancier modelines. Possibly also gives away that I'm a VIM
refugee.

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config (powerline-default-theme))
#+END_SRC

** Mixed-DPI Toggle

Because I have a mixed-DPI setup and I'm under X, I need to be able to rescale
an entire Emacs frame at a time on the fly, so I also include keybindings for
that. This can be hooked into for e.g. fixing treemacs icons.

#+BEGIN_SRC emacs-lisp
  (defvar my/toggle-face-height-hook nil
    "Called when toggling the face height for mixed-DPI setups")

  (defun my/current-default-face-height ()
    (face-attribute 'default :height (selected-frame)))

  (defun my/toggle-face-height ()
    (interactive)

    (set-face-attribute 'default (selected-frame) :height
                        (if (> (my/current-default-face-height) 80) 60 100))
    (run-hooks 'my/toggle-face-height-hook))

  (global-set-key (kbd "C-x T s") 'my/toggle-face-height)
#+END_SRC

** Color scheme
   
#+BEGIN_SRC emacs-lisp
  (setq my-light-theme 'gruvbox-light-soft)
  (setq my-dark-theme 'gruvbox-dark-soft)
  (setq my-initial-theme my-dark-theme)
#+END_SRC

This provides a function which observes the current theme, and toggles it to
light if it is dark.

#+BEGIN_SRC emacs-lisp
  (defun my/toggle-theme ()
    (interactive)

    (let ((is-dark (seq-contains custom-enabled-themes my-dark-theme)))
      (dolist (theme custom-enabled-themes)
	(disable-theme theme))
      (load-theme (if is-dark my-light-theme my-dark-theme) t)))
#+END_SRC

If we're using a windowing system, then apply the startup theme and bind a
toggle key.

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :if window-system
    :demand t
    :bind ("C-x T t" . my/toggle-theme)
    :config
    (load-theme my-initial-theme t))
#+END_SRC

** Undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :delight undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

** Window Management

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+END_SRC

** Evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (setq my-project-type-glyph-alist
     '((nil . "Ø")
       (generic . "*")
       (cmake . "▲")
       (dune . "🏜")))

  (defun my/project-type-glyph ()
    (let ((type (projectile-project-type)))
      (cdr
        (or (assoc type my-project-type-glyph-alist)
            (cons type type)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand
    :after (helm)
    :delight (projectile-mode
              (:eval (format " 🚀:%s" (my/project-type-glyph))))
    :bind-keymap ("C-c p" . projectile-command-map)
    :config
    (progn
      (projectile-mode 1)
      (projectile-discover-projects-in-search-path)
      (setq projectile-completion-system 'helm)))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :delight helm-mode
    :demand t
    :init
    (progn
      (setq helm-mode-fuzzy-match t)
      (setq helm-completion-in-region-fuzzy-match t)
      (setq helm-always-two-windows nil)
      (setq helm-display-buffer-default-height 23)
      (setq helm-default-display-buffer-functions
            '(display-buffer-in-side-window)))
    :config
    (progn
      (require 'helm-config)
      (helm-mode 1)
      (helm-adaptive-mode 1))
    :bind (("M-x" . helm-M-x)
           ("C-x r b" . helm-filtered-bookmarks)
           ("C-x C-f" . helm-find-files)))
  (ido-mode 0)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :after (helm projectile)
    :config (helm-projectile-on))
#+END_SRC

** Treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
    (progn
      (treemacs-git-mode 'deferred)
      (treemacs-filewatch-mode 1)
      (define-key treemacs-mode-map [mouse-1]
        #'treemacs-single-click-expand-action)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after (treemacs projectile))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-magit
    :after (treemacs magit))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after (treemacs evil))
#+END_SRC

Bind =C-x t= so that it moves the cursor to the treemacs buffer, opening it if
necessary. Supplying the universal argument toggles the treemacs buffer instead.

#+BEGIN_SRC emacs-lisp
  (defun my/treemacs-command (arg)
    (interactive "P")
    (if (> (prefix-numeric-value arg) 1)
	(treemacs)
      (treemacs-select-window)))

  (global-set-key (kbd "C-x t") 'my/treemacs-command)
#+END_SRC

Rescale treemacs icons when we toggle the font-size for mixed-DPI.

#+BEGIN_SRC emacs-lisp
  (add-hook 'my/toggle-face-height-hook
            #'(lambda ()
                (treemacs-resize-icons
                 (if (> (my/current-default-face-height) 80) 22 11))))
#+END_SRC

Open Treemacs on startup automatically.

#+BEGIN_SRC emacs-lisp
  (treemacs-select-window)
#+END_SRC

** Code Folding

#+BEGIN_SRC emacs-lisp
  (use-package origami
    :after evil
    :config
    (progn
      (evil-define-key 'normal origami-mode-map "zo" 'origami-open-node)
      (evil-define-key 'normal origami-mode-map "zO" 'origami-open-node-recursively)
      (evil-define-key 'normal origami-mode-map "zc" 'origami-close-node)
      (evil-define-key 'normal origami-mode-map "zC" 'origami-close-node-recursively)
      (evil-define-key 'normal origami-mode-map "za" 'origami-forward-toggle-node)
      (evil-define-key 'normal origami-mode-map "zA" 'origami-recursively-toggle-node)
      (evil-define-key 'normal origami-mode-map "zv" 'origami-show-node)
      (evil-define-key 'normal origami-mode-map "zx" 'origami-reset)
      (evil-define-key 'normal origami-mode-map "zm" 'origami-close-all-nodes)
      (evil-define-key 'normal origami-mode-map "zr" 'origami-open-all-nodes)
      (global-origami-mode)))
#+END_SRC

* Tools
** Org

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-d20
    :commands org-d20-mode)
#+END_SRC

** Git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config
    (progn
      (add-hook 'magit-mode-hook #'(lambda () (origami-mode 0)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after (evil magit))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :delight git-gutter-mode
    :config (global-git-gutter-mode 1))
#+END_SRC

* Languages
** MATLAB

Normally, =.m= files are treated as Objective-C files. I don't really do any
ObjC, so they're going to be treated as MATLAB files instead.

#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :mode "\\.m\\'"
    :init
    (progn
      (setq matlab-indent-function t)  ; TODO figure out what this does
      (setq matlab-shell-command "/usr/local/bin/matlab")))
#+END_SRC

** Python

Python development environment using Elpy.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :delight (elpy-mode " 🐍")
    :config
    (progn
      (elpy-enable)

      ;; replace flymake with flycheck
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode)))
#+END_SRC

Automatically format Python code on save using the Black formatter.

#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :delight (blacken-mode " 🏴")
    :hook (elpy-mode . blacken-mode))
#+END_SRC

** TODO Ocaml

#+NAME: packages/ocaml
| Package        | Description     |
|----------------+-----------------|
| ggtags         |                 |
| helm-gtags     |                 |

#+BEGIN_SRC emacs-lisp
  (defun my/ocaml/init-opam ()
    (if (executable-find "opam")
        (let ((share (string-trim-right
                      (with-output-to-string
                        (with-current-buffer
                            standard-output
                          (process-file
                           shell-file-name nil '(t nil) nil shell-command-switch
                           "opam config var share"))))))
          (cond ((string= "" share)
                 (message "warning: `%s' output empty string." "opam config var share"))
                ((not (file-directory-p share))
                 (message "%s" "warning: opam share directory does not exist."))
                (t (setq opam-share share
                         opam-load-path (concat share "/emacs/site-lisp"))
                   (add-to-list 'load-path opam-load-path))))
      (unless (executable-find "ocamlmerlin")
        (message "warning: cannot find `%s' or `%s' executable." "opam" "merlin"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :mode (("\\.ml[ily]?$" . tuareg-mode)
           ("\\.topml$" . tuareg-mode))
    :init
    (progn
      (my/ocaml/init-opam)
      (add-hook 'tuareg-mode-hook 'company-mode)
      (add-hook 'tuareg-mode-hook 'flycheck-mode)
      (dolist (ext '(".cmo" ".cmx" ".cma" ".cmxa" ".cmi" ".cmxs" ".cmt"
                     ".cmti" ".annot"))
        (add-to-list 'completion-ignored-extensions ext))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package merlin
    :delight (merlin-mode " ⚗‍")
    :hook (tuareg-mode . merlin-mode)
    :init
    (progn
      (add-to-list 'company-backends 'merlin-company-backend)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ocp-indent
    :hook (tuareg-mode . ocp-indent-caml-mode-setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'smartparens
    (sp-local-pair 'tuareg-mode "'" nil :actions nil)
    (sp-local-pair 'tuareg-mode "`" nil :actions nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package utop
    :delight (utop-minor-mode " ⩂")
    :hook (tuareg-mode . utop-minor-mode)
    :config
    (progn
      (if (executable-find "opam")
          (setq utop-command "opam config exec -- utop -emacs")
        (message "warning: cannot find `opam' executable."))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-ocaml
    :after (flycheck merlin)
    :config
    (progn
      (setq merlin-error-after-save nil)
      (flycheck-ocaml-setup)))
#+END_SRC

Register a projectile project type for Dune.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'projectile
    (projectile-register-project-type
     'dune '("dune-project")
     :compile "dune build"
     :test "dune runtest"))
#+END_SRC
